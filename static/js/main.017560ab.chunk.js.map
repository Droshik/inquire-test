{"version":3,"sources":["components/PostListItem/PostListItem.styles.js","api/postsApi.js","store/actions/commentsActions.js","store/actions/postsActions.js","components/PostListItem/PostListItem.jsx","components/CreateNewPost/CreateNewPost.styles.js","components/CreateNewPost/CreateNewPost.js","pages/ListOfPosts.jsx","components/AddComment/AddComment.styles.js","api/commentsApi.js","components/AddComment/AddComment.jsx","components/CommentListItem/CommentListItem.styles.js","components/CommentListItem/CommentsListItem.jsx","components/CommentsList.js","components/PostEditor/PostEditor.styles.js","components/PostEditor/PostEditor.jsx","pages/PostDetails/PostDetails.styles.js","pages/PostDetails/PostDetails.jsx","App.jsx","store/reducers/commentsReducer.js","store/reducers/postsReducer.js","store/reducers/index.js","store/index.js","index.js"],"names":["PostListWrap","styled","div","PostListTitle","h3","PostListTitleWrap","PostListBody","p","PostListDeleteButton","button","PostListDetailsButton","Link","BASE_URL","headers","Headers","append","commentsReducerTypes","postsActionsTypes","fetchListOfPostsAction","dispatch","type","fetch","then","response","ok","json","Error","posts","payload","catch","e","fetchSelectedPostAction","postId","getPost","post","comments","updatePostAction","id","data","postData","requestOptions","method","body","JSON","stringify","updatePost","deletePostAction","deletePost","parseInt","createPostAction","title","raw","createPost","PostListItem","postContent","useDispatch","className","onClick","to","CreateNewPostForm","form","CreateNewInput","input","CreateNewTextarea","textarea","CreateNewPostButton","CreateNewPost","titleRef","useRef","postRef","onSubmit","preventDefault","current","value","placeholder","ref","rows","ListOfPosts","useSelector","state","listOfPosts","error","isLoading","useEffect","toString","length","map","AddCommentLabel","label","AddCommentTextarea","AddCommentButton","AddComment","useParams","selectedPost","commentRef","commentData","createComment","htmlFor","name","Comment","CommentsListItem","CommentsList","comment","PostEditorForm","PostEditorInput","PostEditorTextarea","PostEditorButton","PostEditor","currentTitle","currentBody","defaultValue","BackToListLink","PostDetailsControls","PostEditButton","PostDeleteButton","PostDetails","useState","isEditing","setIsEditing","history","useHistory","push","App","basename","process","exact","path","defaultState","combineReducers","action","types","filter","createStore","reducers","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.017560ab.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const PostListWrap = styled.div`\n  border: 2px solid #5ec4cd;\n  background: #e9f3f5;\n  border-radius: 14px;\n  padding: 20px;\n  margin-bottom: 12px;\n  position: relative;\n  :last-of-type {\n    margin-bottom: 0;\n  }\n`;\n\nexport const PostListTitle = styled.h3`\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 1.4;\n  color: #015c65;\n  padding: 0 12px 0 0;\n  margin: 0;\n`;\n\nexport const PostListTitleWrap = styled.div`\n  padding: 12px 0;\n`;\n\nexport const PostListBody = styled.p`\n  font-size: 18px;\n  line-height: 1.4;\n  padding-bottom: 20px;\n`;\n\nexport const PostListDeleteButton = styled.button`\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  padding: 0 4px;\n  border: 2px solid #bf7330;\n  border-radius: 4px;\n  background: #ffb573;\n  cursor: pointer;\n`;\n\nexport const PostListDetailsButton = styled(Link)`\n  text-decoration: none;\n  border: 2px solid #2f6065;\n  border-radius: 14px;\n  background: #77bcc3;\n  padding: 12px 24px;\n  color: #2f6065;\n  cursor: pointer;\n  :hover {\n    background: #287e86;\n  }\n`;\n","const BASE_URL = 'https://bloggy-api.herokuapp.com/posts';\nconst headers = new Headers();\nheaders.append('Content-Type', 'application/json');\n\nexport const getListOfPosts = () => fetch(BASE_URL).then((response) => {\n  if (response.ok) {\n    return response.json();\n  }\n  throw new Error('can not load data');\n});\n\nexport const getPost = (postId) => fetch(`${BASE_URL}/${postId}?_embed=comments`).then((response) => {\n  if (response.ok) {\n    return response.json();\n  }\n  throw new Error('No post with this id');\n});\n\n/**\n * @param postData Content of post.\n * @param {string} postData.title Title of post.\n * @param {string} postData.body Post text.\n */\nexport const createPost = (postData) => {\n  const raw = JSON.stringify(postData);\n\n  const requestOptions = {\n    method: 'POST',\n    body: raw,\n    headers,\n  };\n\n  return fetch(BASE_URL, requestOptions);\n};\n\nexport const deletePost = (postId) => {\n  const requestOptions = {\n    method: 'DELETE',\n    headers,\n  };\n\n  return fetch(`${BASE_URL}/${postId}`, requestOptions);\n};\n\n/**\n * @param postId Id of post.\n * @param postData Content of post.\n * @param {string} postData.title Title of post.\n * @param {string} postData.body Post text.\n */\nexport const updatePost = (postId, postData) => {\n  const raw = JSON.stringify(postData);\n\n  const requestOptions = {\n    method: 'PUT',\n    body: raw,\n    headers,\n  };\n\n  return fetch(`${BASE_URL}/${postId}`, requestOptions);\n};\n","export const commentsReducerTypes = {\n  SET_COMMENTS_LIST: 'comments/SET_COMMENTS_LIST',\n};\n\nexport const updateComments = (payload) => ({\n  type: commentsReducerTypes.SET_COMMENTS_LIST,\n  payload,\n});\n","import {\n  createPost,\n  deletePost,\n  getListOfPosts,\n  getPost,\n  updatePost,\n} from '../../api/postsApi';\nimport { updateComments } from './commentsActions';\n\nexport const postsActionsTypes = {\n  FETCH_LIST_OF_POSTS: 'posts/FETCH_LIST_OF_POSTS',\n  FETCH_LIST_OF_POSTS_SUCCESS: 'posts/FETCH_LIST_OF_POSTS_SUCCESS',\n  FETCH_LIST_OF_POSTS_ERROR: 'posts/FETCH_LIST_OF_POSTS_ERROR',\n  DELETE_SELECTED_POST: 'posts/DELETE_SELECTED_POST',\n  FETCH_SELECTED_POST: 'posts/FETCH_SELECTED_POST',\n  FETCH_SELECTED_POST_SUCCESS: 'posts/FETCH_SELECTED_POST_SUCCESS',\n  FETCH_SELECTED_POST_ERROR: 'posts/FETCH_SELECTED_POST_ERROR',\n};\n\nexport const fetchListOfPostsAction = () => (dispatch) => {\n  dispatch({ type: postsActionsTypes.FETCH_LIST_OF_POSTS });\n  getListOfPosts()\n    .then((posts) => {\n      dispatch({\n        type: postsActionsTypes.FETCH_LIST_OF_POSTS_SUCCESS,\n        payload: posts,\n      });\n    })\n    .catch((e) => dispatch({\n      type: postsActionsTypes.FETCH_LIST_OF_POSTS_ERROR,\n      payload: e,\n    }));\n};\n\nexport const fetchSelectedPostAction = (postId) => (dispatch) => {\n  if (!postId) {\n    dispatch({\n      type: postsActionsTypes.FETCH_SELECTED_POST_SUCCESS,\n      payload: null,\n    });\n  } else {\n    dispatch({ type: postsActionsTypes.FETCH_SELECTED_POST });\n    getPost(postId)\n      .then((post) => {\n        dispatch({\n          type: postsActionsTypes.FETCH_SELECTED_POST_SUCCESS,\n          payload: post,\n        });\n        dispatch(updateComments(post.comments));\n      })\n      .catch((e) => dispatch({\n        type: postsActionsTypes.FETCH_SELECTED_POST_ERROR,\n        payload: e,\n      }));\n  }\n};\n\nexport const updatePostAction = (id, data) => (dispatch) => {\n  updatePost(id, data).then(() => {\n    dispatch(fetchSelectedPostAction(id));\n  });\n};\n\nexport const deletePostAction = (postId) => (dispatch) => {\n  if (postId) {\n    deletePost(parseInt(postId, 10)).then(() => {\n      dispatch({\n        type: postsActionsTypes.DELETE_SELECTED_POST,\n        payload: postId,\n      });\n    });\n  }\n};\n\nexport const createPostAction = (title, body) => (dispatch) => {\n  createPost({ title, body })\n    .then((response) => response)\n    .then(() => {\n      dispatch(fetchListOfPostsAction());\n    });\n};\n","import React from 'react';\nimport PropTypes, { number, string } from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport {\n  PostListWrap,\n  PostListTitle,\n  PostListTitleWrap,\n  PostListBody,\n  PostListDeleteButton,\n  PostListDetailsButton,\n} from './PostListItem.styles';\nimport { deletePostAction } from '../../store/actions/postsActions';\n\nconst PostListItem = ({ postContent }) => {\n  const { id, body, title } = postContent;\n  const dispatch = useDispatch();\n\n  const deleteClickHandler = () => {\n    dispatch(deletePostAction(postContent.id));\n  };\n\n  return (\n    <PostListWrap className=\"post\">\n      <PostListTitleWrap className=\"post__title\">\n        <PostListTitle>{title}</PostListTitle>\n      </PostListTitleWrap>\n      <PostListBody className=\"post__body\">{body}</PostListBody>\n      <PostListDeleteButton type=\"button\" onClick={deleteClickHandler}>\n        X\n      </PostListDeleteButton>\n      <PostListDetailsButton to={`post/${id}`}>\n        Show details\n      </PostListDetailsButton>\n    </PostListWrap>\n  );\n};\n\nPostListItem.propTypes = {\n  postContent: PropTypes.shape({\n    id: number,\n    title: string,\n    body: string,\n  }).isRequired,\n};\n\nexport default PostListItem;\n","import styled from 'styled-components';\n\nexport const CreateNewPostForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 40px;\n`;\n\nexport const CreateNewInput = styled.input`\n  margin: 8px 0;\n  width: 100%;\n  height: 40px;\n  border-radius: 14px;\n  border: 2px solid #5EC4CD;\n  padding: 10px;\n  color: #015C65;\n  :active,\n  :focus {\n    border-radius: 14px;\n    border: 2px solid #028E9B;\n    outline: none;\n  }\n`;\n\nexport const CreateNewTextarea = styled.textarea`\n  margin: 8px 0;\n  width: 100%;\n  height: 100px;\n  border-radius: 14px;\n  border: 2px solid #5EC4CD;\n  padding: 10px;\n  color: #015C65;\n  :active,\n  :focus {\n    border-radius: 14px;\n    border: 2px solid #028E9B;\n    outline: none;\n  }\n`;\n\nexport const CreateNewPostButton = styled.button`\n  padding: 12px 24px;\n  background: #FFB573;\n  border: 2px solid #BF7330;\n  border-radius: 14px;\n  cursor: pointer;\n  :hover {\n    background: #d08140;\n  }\n`;\n","import React, { useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { createPostAction } from '../../store/actions/postsActions';\nimport {\n  CreateNewPostForm, CreateNewInput, CreateNewTextarea, CreateNewPostButton,\n} from './CreateNewPost.styles';\n\nexport const CreateNewPost = () => {\n  const dispatch = useDispatch();\n  const titleRef = useRef(null);\n  const postRef = useRef(null);\n  const submitHandler = (e) => {\n    e.preventDefault();\n    if (titleRef.current.value && postRef.current.value) {\n      dispatch(createPostAction(titleRef.current.value, postRef.current.value));\n      titleRef.current.value = '';\n      postRef.current.value = '';\n    }\n  };\n  return (\n    <CreateNewPostForm onSubmit={submitHandler}>\n      <CreateNewInput type=\"text\" placeholder=\"Title\" ref={titleRef} />\n      <CreateNewTextarea rows=\"10\" placeholder=\"Post\" ref={postRef} />\n      <CreateNewPostButton type=\"submit\">Create Post</CreateNewPostButton>\n    </CreateNewPostForm>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostListItem from '../components/PostListItem/PostListItem';\nimport { fetchListOfPostsAction } from '../store/actions/postsActions';\nimport { CreateNewPost } from '../components/CreateNewPost/CreateNewPost';\n\nconst ListOfPosts = () => {\n  const { listOfPosts, error, isLoading } = useSelector((state) => state.posts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchListOfPostsAction());\n  }, [dispatch]);\n\n  if (isLoading) {\n    return <h1>LOADER</h1>;\n  }\n\n  if (error) {\n    return <h1>{error.toString()}</h1>;\n  }\n\n  return (\n    <>\n      <CreateNewPost />\n\n      {listOfPosts.length && listOfPosts.map((postContent) => (\n        <PostListItem key={postContent.id} postContent={postContent} />\n      ))}\n    </>\n  );\n};\n\nexport default ListOfPosts;\n","import styled from 'styled-components';\n\nexport const AddCommentLabel = styled.label`\n  line-height: 1.5;\n  font-size: 18px;\n  font-weight: 500;\n  color: #015C65;\n`;\n\nexport const AddCommentTextarea = styled.textarea`\n  display: block;\n  margin: 8px 0;\n  width: 100%;\n  height: 100px;\n  border-radius: 14px;\n  border: 2px solid #5EC4CD;\n  padding: 10px;\n  color: #015C65;\n    :active,\n    :focus {\n      border-radius: 14px;\n      border: 2px solid #028E9B;\n      outline: none;\n    }\n`;\n\nexport const AddCommentButton = styled.button`\n  padding: 12px 24px;\n  background: #FFB573;\n  border: 2px solid #BF7330;\n  border-radius: 14px;\n  cursor: pointer;\n  :hover {\n    background: #d08140;\n  }\n`;\n","const BASE_URL = 'https://bloggy-api.herokuapp.com/comments';\nconst headers = new Headers();\nheaders.append('Content-Type', 'application/json');\n\n/**\n * @param commentData Content of comment.\n * @param {number} commentData.postId id of post to which the comment.\n * @param {string} commentData.body Comment text.\n */\nexport const createComment = (commentData) => {\n  const raw = JSON.stringify(commentData);\n\n  const requestOptions = {\n    method: 'POST',\n    body: raw,\n    headers,\n  };\n\n  return fetch(BASE_URL, requestOptions);\n};\n","import React, { useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport {\n  AddCommentLabel,\n  AddCommentTextarea,\n  AddCommentButton,\n} from './AddComment.styles';\nimport { createComment } from '../../api/commentsApi';\nimport { fetchSelectedPostAction } from '../../store/actions/postsActions';\n\nconst AddComment = () => {\n  const { id } = useParams();\n  const { selectedPost } = useSelector((state) => state.posts);\n  const commentRef = useRef('null');\n  const dispatch = useDispatch();\n  const submitHandler = (e) => {\n    e.preventDefault();\n    if (commentRef.current.value) {\n      createComment({\n        postId: selectedPost.id,\n        body: commentRef.current.value,\n      }).then(() => {\n        dispatch(fetchSelectedPostAction(id));\n      });\n    }\n  };\n  return (\n    <form onSubmit={submitHandler}>\n      <AddCommentLabel htmlFor=\"newComment\">\n        Write a comment\n        <AddCommentTextarea\n          name=\"comment\"\n          id=\"newComment\"\n          rows=\"3\"\n          placeholder=\"Comment\"\n          ref={commentRef}\n        />\n      </AddCommentLabel>\n      <AddCommentButton type=\"submit\">Send a comment</AddCommentButton>\n    </form>\n  );\n};\n\nexport default AddComment;\n","import styled from 'styled-components';\n\nexport const Comment = styled.div`\n  font-size: 16px;\n  line-height: 1.4;\n  background: #fde8d3;\n  border-radius: 14px;\n  margin: 12px 0;\n  padding: 12px;\n`;\n","import React from 'react';\nimport PropTypes, { number, string } from 'prop-types';\nimport { Comment } from './CommentListItem.styles';\n\nconst CommentsListItem = ({ commentData }) => {\n  const { body } = commentData;\n  return (\n    <Comment>\n      {body}\n    </Comment>\n  );\n};\n\nCommentsListItem.propTypes = {\n  commentData: PropTypes.shape({\n    id: number,\n    postId: number,\n    body: string,\n  }).isRequired,\n};\n\nexport default CommentsListItem;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport CommentsListItem from './CommentListItem/CommentsListItem';\n\nconst CommentsList = () => {\n  const { comments } = useSelector((state) => state.comments);\n  return (\n    <div>\n      {comments.length > 0\n        && comments.map((comment) => (\n          <CommentsListItem commentData={comment} key={comment.id} />\n        ))}\n    </div>\n  );\n};\n\nexport default CommentsList;\n","import styled from 'styled-components';\n\nexport const PostEditorForm = styled.form`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const PostEditorInput = styled.input`\n  margin: 8px 0;\n  width: 100%;\n  border-radius: 14px;\n  border: 2px solid #5ec4cd;\n  padding: 10px;\n  color: #015c65;\n  :active,\n  :focus {\n    border-radius: 14px;\n    border: 2px solid #028e9b;\n    outline: none;\n  }\n`;\n\nexport const PostEditorTextarea = styled.textarea`\n  margin: 8px 0;\n  width: 100%;\n  border-radius: 14px;\n  border: 2px solid #5ec4cd;\n  padding: 10px;\n  color: #015c65;\n  :active,\n  :focus {\n    border-radius: 14px;\n    border: 2px solid #028e9b;\n    outline: none;\n  }\n`;\n\nexport const PostEditorButton = styled.button`\n  padding: 12px 24px;\n  background: #ffb573;\n  border: 2px solid #bf7330;\n  border-radius: 14px;\n  cursor: pointer;\n\n  :hover {\n    background: #d08140;\n  }\n`;\n","import React, { useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport {\n  PostEditorForm,\n  PostEditorInput,\n  PostEditorTextarea,\n  PostEditorButton,\n} from './PostEditor.styles';\nimport { updatePostAction } from '../../store/actions/postsActions';\n\nconst PostEditor = () => {\n  const { id } = useParams();\n  const { selectedPost } = useSelector((state) => state.posts);\n  const { title, body } = selectedPost;\n  const dispatch = useDispatch();\n\n  const currentTitle = useRef(null);\n  const currentBody = useRef(null);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    if (currentTitle.current.value && currentBody.current.value) {\n      dispatch(\n        updatePostAction(id, {\n          title: currentTitle.current.value,\n          body: currentBody.current.value,\n        }),\n      );\n    }\n  };\n  return (\n    <PostEditorForm onSubmit={submitHandler}>\n      <PostEditorInput\n        type=\"text\"\n        id=\"postEditorTitle\"\n        defaultValue={title}\n        ref={currentTitle}\n      />\n      <PostEditorTextarea\n        name=\"\"\n        id=\"postEditorBody\"\n        rows=\"10\"\n        defaultValue={body}\n        ref={currentBody}\n      />\n      <PostEditorButton type=\"submit\">Edit</PostEditorButton>\n    </PostEditorForm>\n  );\n};\n\nexport default PostEditor;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const BackToListLink = styled(Link)`\n  text-decoration: none;\n  color: black;\n`;\n\nexport const PostDetailsControls = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const PostEditButton = styled.button`\n  text-decoration: none;\n  border: 2px solid #2f6065;\n  border-radius: 14px;\n  background: #77bcc3;\n  padding: 12px 24px;\n  color: #2f6065;\n  margin-left: auto;\n  margin-right: 12px;\n  cursor: pointer;\n  :hover {\n    background: #287e86;\n  }\n`;\n\nexport const PostDeleteButton = styled.button`\n  text-decoration: none;\n  border: 2px solid darkred;\n  border-radius: 14px;\n  background: #ea6161;\n  padding: 12px 24px;\n  color: #2f6065;\n  cursor: pointer;\n\n  :hover {\n    background: #b32b2b;\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport AddComment from '../../components/AddComment/AddComment';\nimport {\n  deletePostAction,\n  fetchSelectedPostAction,\n} from '../../store/actions/postsActions';\nimport CommentsList from '../../components/CommentsList';\nimport PostEditor from '../../components/PostEditor/PostEditor';\nimport {\n  BackToListLink,\n  PostDetailsControls,\n  PostEditButton,\n  PostDeleteButton,\n} from './PostDetails.styles';\n\nconst PostDetails = () => {\n  const { id } = useParams();\n  const { comments } = useSelector((state) => state.comments);\n  const { selectedPost, error } = useSelector((state) => state.posts);\n  const [isEditing, setIsEditing] = useState(false);\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  useEffect(() => {\n    dispatch(fetchSelectedPostAction(id));\n  }, []);\n\n  const deleteClickHandler = () => {\n    dispatch(deletePostAction(parseInt(id, 10)));\n    history.push('/');\n  };\n\n  if (error) {\n    return <h1>{error.toString()}</h1>;\n  }\n\n  return (\n    selectedPost && (\n      <div>\n        <PostDetailsControls>\n          <BackToListLink\n            to=\"/\"\n            onClick={() => {\n              dispatch(fetchSelectedPostAction(null));\n            }}\n          >\n            ⬅ List of all posts\n          </BackToListLink>\n          <PostEditButton\n            type=\"button\"\n            onClick={() => {\n              setIsEditing(!isEditing);\n            }}\n          >\n            edit post\n          </PostEditButton>\n          <PostDeleteButton type=\"button\" onClick={deleteClickHandler}>\n            delete post\n          </PostDeleteButton>\n        </PostDetailsControls>\n\n        {isEditing && <PostEditor />}\n\n        <h2>{selectedPost.title}</h2>\n        <div>{selectedPost.body}</div>\n\n        <AddComment />\n        {comments.length > 0 && <CommentsList />}\n      </div>\n    )\n  );\n};\n\nexport default PostDetails;\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport ListOfPosts from './pages/ListOfPosts';\nimport PostDetails from './pages/PostDetails/PostDetails';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"appWrapper\">\n        <Switch>\n          <Route exact path=\"/\">\n            <ListOfPosts />\n          </Route>\n          <Route exact path=\"/post/:id\">\n            <PostDetails />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { commentsReducerTypes as types } from '../actions/commentsActions';\n\nconst defaultState = {\n  comments: [],\n};\n\nexport const commentsReducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case types.SET_COMMENTS_LIST:\n      return { comments: action.payload };\n    default:\n      return state;\n  }\n};\n","import { postsActionsTypes as types } from '../actions/postsActions';\n\nconst defaultState = {\n  listOfPosts: [],\n  isLoading: false,\n  error: null,\n  selectedPost: null,\n};\n\nexport const postsReducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case types.FETCH_LIST_OF_POSTS:\n      return { ...state, isLoading: true };\n\n    case types.FETCH_LIST_OF_POSTS_SUCCESS: {\n      return { ...state, isLoading: false, listOfPosts: action.payload };\n    }\n\n    case types.FETCH_LIST_OF_POSTS_ERROR:\n      return { ...state, isLoading: false, error: action.payload };\n\n    case types.DELETE_SELECTED_POST:\n      return {\n        ...state,\n        listOfPosts: state.listOfPosts.filter(\n          (post) => post.id !== action.payload,\n        ),\n      };\n\n    case types.FETCH_SELECTED_POST:\n      return { ...state, isLoading: true };\n\n    case types.FETCH_SELECTED_POST_SUCCESS: {\n      return { ...state, isLoading: false, selectedPost: action.payload };\n    }\n\n    case types.FETCH_SELECTED_POST_ERROR:\n      return { ...state, isLoading: false, error: action.payload };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from '@reduxjs/toolkit';\nimport { commentsReducer } from './commentsReducer';\nimport { postsReducer } from './postsReducer';\n\nexport default combineReducers({\n  comments: commentsReducer,\n  posts: postsReducer,\n});\n","import { createStore, applyMiddleware } from '@reduxjs/toolkit';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducers from './reducers';\n\nexport default createStore(reducers, composeWithDevTools(applyMiddleware(thunk)));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}